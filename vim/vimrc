 "__  __        __     _____ __  __ ____   ____ 
"|  \/  |_   _  \ \   / /_ _|  \/  |  _ \ / ___|
"| |\/| | | | |  \ \ / / | || |\/| | |_) | |    
"| |  | | |_| |   \ V /  | || |  | |  _ <| |___ 
"|_|  |_|\__, |    \_/  |___|_|  |_|_| \_\\____|
        "|___/                                  

set nocompatible

filetype on
filetype indent on
filetype plugin on
filetype plugin indent on

set mouse=a
set encoding=utf-8

let &t_ut=''

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2

set list
set listchars=tab:▸\ ,trail:▫

set scrolloff=5
set tw=0
set indentexpr=
set backspace=indent,eol,start
set foldmethod=indent
set foldlevel=99
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
set laststatus=2
set autochdir
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

syntax on

let mapleader=" "

set number
set norelativenumber
set cursorline
set wrap
set showcmd
set wildmenu
set hlsearch
set incsearch
set ignorecase
set smartcase


exec "nohlsearch"

"Open vimrc file
map <LEADER>rc :e ~/.vim/vimrc<CR>

"Press space twice to jump to the next '<+>' and edit it
map <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l

" remap the up down right left key
noremap i k
noremap k j
noremap j h
noremap h i
noremap H I
noremap I 5k
noremap K 5j
noremap J 7h
noremap L 7l

inoremap { {}<Esc>i
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap " ""<Esc>i
inoremap ' ''<Esc>i
inoremap ` ``<Esc>i
inoremap < <><Esc>i

" markdown shortcut"
inoremap ,b **<Esc>i
inoremap ,i ****<Esc>hi
inoremap ,s ~~~~<Esc>hi


"Spell Check with <space>sc
"Press z= to select the correct word
map <LEADER>sc :set spell!<CR>
noremap <C-x> a<C-x>s
inoremap <C-x> <Esc>a<C-x>s

"<C-o> <C-i> move cursor to previous position or next position
" :w !sudo tee % " use this command to save file while open without super user privilege

"Press <space><enter> to UN highlight search
noremap <LEADER><CR> :nohlsearch<CR>

" copy and paste from and to outside
noremap <C-c> "+y
noremap <C-p> "+p


" Save Quit and reload vimrc
map S :w<CR>
map Q :q<CR>
map R :source $MYVIMRC<CR>

" shortcut to split window
map sa :set nosplitright<CR>:vsplit<CR>
map sd :set splitright<CR>:vsplit<CR>
map sw :set nosplitbelow<CR>:split<CR>
map ss :set splitbelow<CR>:split<CR>

map sv <C-w>t<C-w>H
map sh <C-w>t<C-w>K

" move cursor to the other split window
map <LEADER>l <C-w>l
map <LEADER>i <C-w>k
map <LEADER>k <C-w>j
map <LEADER>j <C-w>h

" adjust the size of the current window
map <up> :res +5<CR>
map <down> :res -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>

" create new tab and change each other
map ti :tabe<CR>
map tj :-tabnext<CR>
map tl :+tabnext<CR>


" Map the NERDTree

" install the plug
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'connorholyday/vim-snazzy'
" File navigation
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Auto complete
Plug 'ycm-core/YouCompleteMe'

Plug 'dense-analysis/ale'

Plug 'preservim/tagbar'

Plug 'mbbill/undotree'

Plug 'iamcco/markdown-preview.nvim'

" Python
Plug 'vim-scripts/indentpython.vim'

" Markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install_sync() }, 'for' :['markdown', 'vim-plug'] }
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
Plug 'vimwiki/vimwiki'

" Bookmarks
Plug 'kshenoy/vim-signature'

Plug 'terryma/vim-multiple-cursors'
Plug 'junegunn/goyo.vim' " distraction free writing mode
Plug 'tpope/vim-surround' " type ysks' to wrap the word with '' or type cs'` to change 'word' to `word`
Plug 'godlygeek/tabular' " type ;Tabularize /= to align the =
Plug 'gcmt/wildfire.vim' " in Visual mode, type i' to select all text in '', or type i) i] i} ip
Plug 'scrooloose/nerdcommenter' " in <space>cc to comment a line

" Dependencies
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'kana/vim-textobj-user'
Plug 'fadein/vim-FIGlet'

" Auto Comment and Uncomment"
Plug 'KarimElghamry/vim-auto-comment'
call plug#end()

" Syntax check

let g:SnazzyTransparent = 0
colorscheme snazzy

map ff :NERDTreeToggle<CR>

"Goyo configuration
map <LEADER>gy :Goyo<CR>
let g:goyo_width = 150

"Signature-vim
let g:SignatureMap = {
      \ 'Leader'             :  "m",
      \ 'PlaceNextMark'      :  "m,",
      \ 'ToggleMarkAtLine'   :  "m.",
      \ 'PurgeMarksAtLine'   :  "m-",
      \ 'DeleteMark'         :  "dm",
      \ 'PurgeMarks'         :  "dm/",
      \ 'PurgeMarkers'       :  "dm?",
      \ 'GotoNextLineAlpha'  :  "m<LEADER>",
      \ 'GotoPrevLineAlpha'  :  "'[",
      \ 'GotoNextSpotAlpha'  :  "`]",
      \ 'GotoPrevSpotAlpha'  :  "`[",
      \ 'GotoNextLineByPos'  :  "]'",
      \ 'GotoPrevLineByPos'  :  "['",
      \ 'GotoNextSpotByPos'  :  "]`",
      \ 'GotoPrevSpotByPos'  :  "[`",
      \ 'GotoNextMarker'     :  "]-",
      \ 'GotoPrevMarker'     :  "[-",
      \ 'GotoNextMarkerAny'  :  "]=",
      \ 'GotoPrevMarkerAny'  :  "[=",
      \ 'ListBufferMarks'    :  "m/",
      \ 'ListBufferMarkers'  :  "m?"
      \ }


" undotree
map L :UndotreeToggle<CR>

"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48:2;%lu;%lu;%lum"


if &term == "alacritty"        
  let &term = "xterm-256color"
endif

"Setting of the autocomment"
let g:inline_comment_dict = {
    \'//': ["js", "ts", "cpp", "c", "dart"],
    \'#': ['py', 'sh'],
    \'"': ['vim'],
    \}
let g:block_comment_dict = {
    \'/*': ["js", "ts", "cpp", "c", "dart"],
    \'"""': ['py'],
    \}
let g:default_inline_comment = '#'
let g:default_block_comment = '/*'
let g:autocomment_map_keys = 0
" Inline comment mapping
vnoremap <silent><C-/> :AutoInlineComment<CR>
nnoremap <silent><C-/> :AutoInlineComment<CR>

" Block comment mapping
vnoremap <C-s> :AutoBlockComment<CR>
nnoremap <C-s> :AutoBlockComment<CR>
